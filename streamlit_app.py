# -*- coding: utf-8 -*-
"""app.py.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1swZG9mooFAs38j2lfk1gqKU0YrTQMKFU
"""

import streamlit as st
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
import matplotlib.pyplot as plt

# Cargar los datos
st.title('Red Neuronal con Streamlit')
st.write("Cargando datos...")
uploaded_file = st.file_uploader("Sube un archivo CSV con las variables independientes y dependiente (Target)", type="csv")

if uploaded_file is not None:
    # Leer los datos subidos
    data = pd.read_csv(uploaded_file)

    st.write("Datos cargados:")
    st.dataframe(data)

    # Separar en variables independientes (X) y dependiente (Y)
    X = data.iloc[:, :-1].values  # Todas las columnas excepto la última
    Y = data.iloc[:, -1].values   # Última columna es la variable dependiente

    # Dividir los datos en conjuntos de entrenamiento y prueba
    X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=42)

    # Escalado de los datos
    scaler = StandardScaler()
    X_train = scaler.fit_transform(X_train)
    X_test = scaler.transform(X_test)

    # Construcción del modelo de red neuronal
    model = Sequential()
    model.add(Dense(36, input_dim=X_train.shape[1], activation='relu'))  # Primera capa oculta con 36 neuronas
    model.add(Dense(12, activation='relu'))                              # Segunda capa oculta con 12 neuronas
    model.add(Dense(1, activation='linear'))                             # Capa de salida para regresión

    # Compilación del modelo
    model.compile(loss='mse', optimizer='adam')

    # Entrenamiento del modelo
    st.write("Entrenando el modelo...")
    history = model.fit(X_train, y_train, epochs=100, validation_split=0.2, verbose=0)

    # Evaluación del modelo
    loss = model.evaluate(X_test, y_test, verbose=0)
    st.write(f"Pérdida (MSE) en los datos de prueba: {loss:.4f}")

    # Predicción
    y_pred = model.predict(X_test)

    # Mostrar las predicciones
    st.subheader("Resultados de Predicción")
    results = pd.DataFrame({'Actual': y_test, 'Predicción': y_pred.flatten()})
    st.write(results)

    # Graficar el error durante el entrenamiento
    st.subheader("Gráfico de la pérdida durante el entrenamiento")
    fig, ax = plt.subplots()
    ax.plot(history.history['loss'], label='Pérdida de Entrenamiento')
    ax.plot(history.history['val_loss'], label='Pérdida de Validación')
    ax.set_xlabel('Épocas')
    ax.set_ylabel('Pérdida (MSE)')
    ax.legend()
    st.pyplot(fig)